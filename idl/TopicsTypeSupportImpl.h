/* -*- C++ -*- */
/* Generated by h:\temp\OpenDDS\bin\opendds_idl.exe version 3.9 (ACE version 6.2a_p10) running on input file Topics.idl */
#ifndef OPENDDS_IDL_GENERATED_TOPICSTYPESUPPORTIMPL_H_BK6ZLY
#define OPENDDS_IDL_GENERATED_TOPICSTYPESUPPORTIMPL_H_BK6ZLY
#include "TopicsC.h"
#include "dds/DCPS/Definitions.h"
#include "TopicsTypeSupportC.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl_T.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: TopicSample */



/* Begin STRUCT: Message */

namespace OpenDDS { namespace DCPS {

void gen_find_size(const TopicSample::Message& stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const TopicSample::Message& stru);

bool operator>>(Serializer& strm, TopicSample::Message& stru);

bool gen_is_bounded_size(const TopicSample::Message&);

size_t gen_max_marshaled_size(const TopicSample::Message& stru, bool align);

bool gen_is_bounded_size(KeyOnly<const TopicSample::Message>);

size_t gen_max_marshaled_size(KeyOnly<const TopicSample::Message> stru, bool align);

void gen_find_size(KeyOnly<const TopicSample::Message> stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, KeyOnly<const TopicSample::Message> stru);

bool operator>>(Serializer& strm, KeyOnly<TopicSample::Message> stru);

}  }

namespace OpenDDS { namespace DCPS {

bool gen_has_key(const TopicSample::Message&);

}  }

namespace TopicSample {
namespace OpenDDSGenerated {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct  Message_KeyLessThan {
  bool operator()(const TopicSample::Message& v1, const TopicSample::Message& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    ACE_UNUSED_ARG(v1);
    ACE_UNUSED_ARG(v2);
    // with no DCPS_DATA_KEYs, return false
    // to allow use of map with just one entry
    return false;
  }
};
}
}
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<TopicSample::Message> {
  typedef TopicSample::Message MessageType;
  typedef TopicSample::MessageSeq MessageSequenceType;
  typedef TopicSample::MessageTypeSupport TypeSupportType;
  typedef TopicSample::MessageDataWriter DataWriterType;
  typedef TopicSample::MessageDataReader DataReaderType;
  typedef TopicSample::OpenDDSGenerated::Message_KeyLessThan LessThanType;

  inline static const char* type_name () { return "TopicSample::Message"; }
  inline static bool gen_has_key (const MessageType& x) { return ::OpenDDS::DCPS::gen_has_key(x); }

  inline static bool gen_is_bounded_size (const MessageType& x) { return ::OpenDDS::DCPS::gen_is_bounded_size(x); }
  inline static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  inline static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  inline static bool gen_is_bounded_size (const OpenDDS::DCPS::KeyOnly<const MessageType>& x) { return ::OpenDDS::DCPS::gen_is_bounded_size(x); }
  inline static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  inline static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }

namespace TopicSample {
  typedef OpenDDS::DCPS::DataWriterImpl_T<TopicSample::Message> MessageDataWriterImpl;
  typedef OpenDDS::DCPS::DataReaderImpl_T<TopicSample::Message> MessageDataReaderImpl;
  typedef OpenDDS::DCPS::TypeSupportImpl_T<TopicSample::Message> MessageTypeSupportImpl;
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
const MetaStruct& getMetaStruct<TopicSample::Message>();
void gen_skip_over(Serializer& ser, TopicSample::Message*);

}  }

#endif

/* End STRUCT: Message */

/* End MODULE: TopicSample */
#endif /* OPENDDS_IDL_GENERATED_TOPICSTYPESUPPORTIMPL_H_BK6ZLY */
