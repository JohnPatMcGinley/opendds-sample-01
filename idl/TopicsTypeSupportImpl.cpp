/* Generated by h:\temp\OpenDDS\bin\opendds_idl.exe version 3.9 (ACE version 6.2a_p10) running on input file Topics.idl */
#include "TopicsTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: TopicSample */



/* Begin STRUCT: Message */

namespace OpenDDS { namespace DCPS {

void gen_find_size(const TopicSample::Message& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.m.in()) + 1;
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.counter);
}

bool operator<<(Serializer& strm, const TopicSample::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.m.in())
    && (strm << stru.counter);
}

bool operator>>(Serializer& strm, TopicSample::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.m.out())
    && (strm >> stru.counter);
}

bool gen_is_bounded_size(const TopicSample::Message&)
{
  return false;
}

size_t gen_max_marshaled_size(const TopicSample::Message& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

bool gen_is_bounded_size(KeyOnly<const TopicSample::Message>)
{
  return true;
}

size_t gen_max_marshaled_size(KeyOnly<const TopicSample::Message> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const TopicSample::Message> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
}

bool operator<<(Serializer& strm, KeyOnly<const TopicSample::Message> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

bool operator>>(Serializer& strm, KeyOnly<TopicSample::Message> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

}  }

namespace OpenDDS { namespace DCPS {

bool gen_has_key(const TopicSample::Message&)
{
  return false;
}

}  }

namespace TopicSample {
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<TopicSample::Message> : MetaStruct {
  typedef TopicSample::Message T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const TopicSample::Message& typed = *static_cast<const TopicSample::Message*>(stru);
    if (std::strcmp(field, "m") == 0) {
      return typed.m.in();
    }
    if (std::strcmp(field, "counter") == 0) {
      return typed.counter;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct TopicSample::Message)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "m") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'm' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'm' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "counter") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'counter' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct TopicSample::Message");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "m") == 0) {
      return make_field_cmp(&T::m, next);
    }
    if (std::strcmp(field, "counter") == 0) {
      return make_field_cmp(&T::counter, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct TopicSample::Message)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"m", "counter", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "m") == 0) {
      return &static_cast<const T*>(stru)->m;
    }
    if (std::strcmp(field, "counter") == 0) {
      return &static_cast<const T*>(stru)->counter;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct TopicSample::Message)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "m") == 0) {
      static_cast<T*>(lhs)->m = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "counter") == 0) {
      static_cast<T*>(lhs)->counter = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct TopicSample::Message)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "m") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->m.in(), static_cast<const T*>(rhs)->m.in());
    }
    if (std::strcmp(field, "counter") == 0) {
      return static_cast<const T*>(lhs)->counter == static_cast<const T*>(rhs)->counter;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct TopicSample::Message)");
  }
};

template<>
const MetaStruct& getMetaStruct<TopicSample::Message>()
{
  static MetaStructImpl<TopicSample::Message> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, TopicSample::Message*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<TopicSample::Message>().getValue(ser, "");
}

}  }

#endif

/* End STRUCT: Message */

/* End MODULE: TopicSample */
